name: Build and deploy AI Service

on:
  push:
    branches: [master]

permissions: write-all

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.filter.outputs.changes_detected }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Debug Branch Info
        run: |
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Last commit: $(git log -1 --oneline)"
          echo "All branches:"
          git branch -a

      - name: Check file changes directly
        id: check-changes
        run: |
          # Lấy commit cuối cùng
          LAST_COMMIT=$(git rev-parse HEAD)
          # Lấy commit trước đó
          PREV_COMMIT=$(git rev-parse HEAD~1 2>/dev/null || git rev-list --max-parents=0 HEAD)

          echo "Comparing $PREV_COMMIT with $LAST_COMMIT"

          # Kiểm tra các file thay đổi
          CHANGED_FILES=$(git diff --name-only $PREV_COMMIT $LAST_COMMIT)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Kiểm tra nếu có thay đổi trong apps/ai hoặc ngoài thư mục apps
          if echo "$CHANGED_FILES" | grep -q -e "^apps/ai/" -e "^[^a][^p][^p][^s]"; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Detected changes relevant to AI service"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "No relevant changes detected"
          fi

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            changes_detected:
              - '!apps/**'
              - 'apps/ai/**'

      - name: Debug Filter Results
        run: |
          echo "Path filter result: ${{ steps.filter.outputs.changes_detected }}"
          echo "Direct check result: ${{ steps.check-changes.outputs.should_deploy }}"

  deploy:
    needs: check-changes
    if: needs.check-changes.outputs.should_deploy == 'true' || steps.check-changes.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Preset Image Name
        run: |
          IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/ai:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV
      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/ai
          file: ./apps/ai/Dockerfile
          push: true
          tags: ${{ env.IMAGE_URL }}
      - name: Deploy to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: "${{ secrets.CAPROVER_SERVER }}"
          app: "${{ secrets.AI_APP_NAME }}"
          token: "${{ secrets.AI_APP_TOKEN }}"
          image: ${{ env.IMAGE_URL }}
